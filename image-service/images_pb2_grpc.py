# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import images_pb2 as images__pb2
import userimage

class ImageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getImage = channel.unary_unary(
                '/img.ImageService/getImage',
                request_serializer=images__pb2.ImageLocation.SerializeToString,
                response_deserializer=images__pb2.Image.FromString,
                )
        self.getImages = channel.stream_stream(
                '/img.ImageService/getImages',
                request_serializer=images__pb2.ImageLocation.SerializeToString,
                response_deserializer=images__pb2.Image.FromString,
                )
        self.getImagesMetadata = channel.unary_stream(
                '/img.ImageService/getImagesMetadata',
                request_serializer=images__pb2.ImageListRequest.SerializeToString,
                response_deserializer=images__pb2.ImageMetadata.FromString,
                )
        self.storeImage = channel.unary_unary(
                '/img.ImageService/storeImage',
                request_serializer=images__pb2.Image.SerializeToString,
                response_deserializer=images__pb2.StoreResult.FromString,
                )
        self.storeImages = channel.stream_stream(
                '/img.ImageService/storeImages',
                request_serializer=images__pb2.Image.SerializeToString,
                response_deserializer=images__pb2.StoreResult.FromString,
                )


class ImageServiceServicer(object):

    userImageAccessor = None

    def getImagesMetadata(self, request, context):
        if self.userImageAccessor == None:
            self.userImageAccessor = userimage.UserImageAccessor()
        userId = request.userId
        startIdx = request.startIdx
        endIdx = request.endIdx

        imagesMetadata = self.userImageAccessor.getImagesMetadata(userId, startIdx, endIdx)
        for imgMetadata in imagesMetadata:
            imageName = imgMetadata["name"]
            imageId = imgMetadata["id"]
            imageCreationDate = imgMetadata["createdTime"]
            yield images__pb2.ImageMetadata(imageName=imageName, imageId=imageId, imageCreationDate=imageCreationDate)


    def getImage(self, request, context):
        if self.userImageAccessor == None:
            self.userImageAccessor = userimage.UserImageAccessor()
        image = self.userImageAccessor.getImage(request.imageId)

        resultImage = images__pb2.Image(
            imageData=image["data"].read(), imageName=image["name"], userId=request.userId)
        return resultImage


    def getImages(self, request_iterator, context):
        if self.userImageAccessor == None:
            self.userImageAccessor = userimage.UserImageAccessor()

        for request in request_iterator:
            imageId = request.imageId
            image = self.userImageAccessor.getImage(imageId)
            yield images__pb2.Image(imageData=image["data"].read(), imageName=image["name"], userId=request.userId)

    def storeImage(self, request, context):
        if self.userImageAccessor == None:
            self.userImageAccessor = userimage.UserImageAccessor()

        userId = request.userId
        imageName = request.imageName
        imageData = request.imageData

        fileId = self.userImageAccessor.storeImage(
            userId, imageName, imageData)
        stored = fileId != None
        
        return images__pb2.StoreResult(stored=stored)



    def storeImages(self, request_iterator, context):
        if self.userImageAccessor == None:
            self.userImageAccessor = userimage.UserImageAccessor()
        
        for request in request_iterator:
                userId = request.userId
                imageName = request.imageName
                imageData = request.imageData
                
                fileId = self.userImageAccessor.storeImage(userId, imageName, imageData)
                stored = fileId != None
                print("File Stored = ", fileId)
                yield images__pb2.StoreResult(stored=stored)
        return

def add_ImageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getImage': grpc.unary_unary_rpc_method_handler(
                    servicer.getImage,
                    request_deserializer=images__pb2.ImageLocation.FromString,
                    response_serializer=images__pb2.Image.SerializeToString,
            ),
            'getImages': grpc.stream_stream_rpc_method_handler(
                    servicer.getImages,
                    request_deserializer=images__pb2.ImageLocation.FromString,
                    response_serializer=images__pb2.Image.SerializeToString,
            ),
            'getImagesMetadata': grpc.unary_stream_rpc_method_handler(
                    servicer.getImagesMetadata,
                    request_deserializer=images__pb2.ImageListRequest.FromString,
                    response_serializer=images__pb2.ImageMetadata.SerializeToString,
            ),
            'storeImage': grpc.unary_unary_rpc_method_handler(
                    servicer.storeImage,
                    request_deserializer=images__pb2.Image.FromString,
                    response_serializer=images__pb2.StoreResult.SerializeToString,
            ),
            'storeImages': grpc.stream_stream_rpc_method_handler(
                    servicer.storeImages,
                    request_deserializer=images__pb2.Image.FromString,
                    response_serializer=images__pb2.StoreResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'img.ImageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/img.ImageService/getImage',
            images__pb2.ImageLocation.SerializeToString,
            images__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getImages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/img.ImageService/getImages',
            images__pb2.ImageLocation.SerializeToString,
            images__pb2.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getImagesMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/img.ImageService/getImagesMetadata',
            images__pb2.ImageListRequest.SerializeToString,
            images__pb2.ImageMetadata.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def storeImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/img.ImageService/storeImage',
            images__pb2.Image.SerializeToString,
            images__pb2.StoreResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def storeImages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/img.ImageService/storeImages',
            images__pb2.Image.SerializeToString,
            images__pb2.StoreResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
