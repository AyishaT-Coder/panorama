pipeline{
    agent any
    environment {
        registry = 'panoramaiubads/user-service'
        registryCredential = 'docker-hub-credentials'
        dockerImage = ''
        file_name = 'user-service.yaml'
        remote_dir_path = ''
        appName = 'user-service'
        jenkinsAppDir = 'user-service'
        githuburl = 'https://raw.githubusercontent.com/airavata-courses/Panorama/kubernetes-update/user-service/user-service.yaml'
        kubeDir = '/home/ubuntu/deploy'
    }
    stages{
        stage('Clone Git Repo') {
        /* Checking out to the repository */
            steps{
                checkout scm
                echo "Successfully cloned git repository"
            }
        }

        stage('Install dependencies ') {
        /* Application dependencies installation*/
            steps{
                sh 'cd ${jenkinsAppDir}/ && npm install'
                echo "Successfully installed packages"
            }
		    
	    }

        stage('Run test') {
        /* Application dependencies installation*/
            steps{
                sh 'cd ${jenkinsAppDir}/ && npm run test'
                echo "Successfully executed test"
            }
		    
	    }
        stage('Build Docker Image') {
        /* Build the docker image */
            steps{
                script{
                    dockerImage = docker.build(registry, "${jenkinsAppDir}")
                }
                echo "Successfully built docker images"
            }
        }

        stage('Push Image to Dockerhub'){
        /* Push image to dockerhub */
            steps{
                script{
                    docker.withRegistry('https://registry.hub.docker.com', registryCredential ){
                    dockerImage.push("latest")
                    }
                   
                }
                echo "Successfully pushed image to docker hub"
            }    
        
        }

        stage('Clean Up Disk Space') {
        /* Removing unused images to clean up disk space */
            steps{
                sh "docker system prune -af --volumes" 
            }
        }    

        stage('Kubernetes Cluster Deployment') {
            steps{
                script{
                    sshPublisher(
                        continueOnError: false, failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: 'ssh_kubemaster',
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        execCommand: "cd ${kubeDir}; rm -rf ${file_name}*; wget ${githuburl}; kubectl delete deployment,services -l app=${appName}; kubectl apply -f ${file_name}"    
                                    )
                            ])
                    ])
                
                }
            }
        }
    }   
           
}